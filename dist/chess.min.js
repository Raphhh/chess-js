/*! chess 29-09-2014 */
var Chess = function() {
    "use strict";
    function a() {
    }

    return a.VERSION = "0.0.0", a
}(), Chess = function(a) {
    "use strict";
    return a.Board = a.Board || {}, a.Board.Board = function() {
        function b() {
            this.__internal__ = {pieces: [], squares: []}, c.call(this)
        }

        var c = function() {
            for(var b = 0; 8 > b; ++b) {
                this.__internal__.squares.push([]);
                for(var c = 0; 8 > c; ++c)this.__internal__.squares[b].push(new a.Board.Square(new a.Movement.Position(b, c)))
            }
        };
        return b.prototype.getSquareByPosition = function(a) {
            if(!this.__internal__.squares[a.getX()])throw new Error("Position x (" + a.getX() + ") out of board");
            if(!this.__internal__.squares[a.getX()][a.getY()])throw new Error("Position y (" + a.getY() + ") out of board");
            return this.__internal__.squares[a.getX()][a.getY()]
        }, b.prototype.getPieces = function() {
            return this.__internal__.pieces
        }, b.prototype.getPieceByPosition = function(a) {
            return this.getSquareByPosition(a).getPiece()
        }, b.prototype.initPieces = function(b) {
            for(var c = new a.Piece.PieceFactory, d = 0, e = b.length; e > d; ++d)this.addPiece(c.createByData(b[d]), new a.Movement.Position(b[d].position.x, b[d].position.y))
        }, b.prototype.addPiece = function(a, b) {
            this.changePiecePosition(a, b), this.__internal__.pieces.push(a)
        }, b.prototype.changePiecePosition = function(b, c) {
            var d = new a.Board.SquareAssociator(b, this.getSquareByPosition(c));
            d.run()
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Board = a.Board || {}, a.Board.Square = function() {
        function a(a) {
            this.__internal__ = {position: a, piece: null}
        }

        return a.prototype.getPosition = function() {
            return this.__internal__.position
        }, a.prototype.setPiece = function(a) {
            this.__internal__.piece = a
        }, a.prototype.removePiece = function() {
            this.__internal__.piece = null
        }, a.prototype.getPiece = function() {
            return this.__internal__.piece
        }, a.prototype.isValidForNewPiece = function(a) {
            return!this.getPiece() || this.getPiece().getColor().getValue() !== a.getColor().getValue()
        }, a
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Board = a.Board || {}, a.Board.SquareAssociator = function() {
        function a(a, b) {
            this.__internal__ = {piece: a, destinationSquare: b}
        }

        return a.prototype.run = function() {
            this.validDestinationSquare(), this.cleanOriginSquare(), this.cleanDestinationSquare(), this.associate()
        }, a.prototype.validDestinationSquare = function() {
            if(!this.__internal__.destinationSquare.isValidForNewPiece(this.__internal__.piece))throw new Error("Square is not valid for the piece")
        }, a.prototype.cleanOriginSquare = function() {
            this.__internal__.piece.getSquare() && this.__internal__.piece.getSquare().removePiece()
        }, a.prototype.cleanDestinationSquare = function() {
            this.__internal__.destinationSquare.getPiece() && (this.__internal__.destinationSquare.getPiece().die(), this.__internal__.destinationSquare.removePiece())
        }, a.prototype.associate = function() {
            this.__internal__.destinationSquare.setPiece(this.__internal__.piece), this.__internal__.piece.setSquare(this.__internal__.destinationSquare)
        }, a
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Game = function() {
        function b(b) {
            var c = new a.Piece.Color(b.playingColor || a.Piece.Color.WHITE), d = new a.Board.Board;
            d.initPieces(b.pieces || []), this.__internal__ = {board: d, coordinator: new a.Movement.Coordinator(d, c)}
        }

        return b.prototype.getBoard = function() {
            return this.__internal__.board
        }, b.prototype.getCoordinator = function() {
            return this.__internal__.coordinator
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.HumanInterface = function() {
        function b(a) {
            this.__internal__ = {game: a}
        }

        var c = function(b) {
            return a.Movement.Position.createByAlgebraicNotation(b)
        }, d = function(a) {
            return this.__internal__.game.getBoard().getPieceByPosition(c(a))
        };
        return b.prototype.move = function(a, b) {
            this.__internal__.game.getCoordinator().moveTo(d.call(this, a), c.call(this, b))
        }, b.prototype.getEligibleSquares = function(a) {
            for(var b = [], c = this.__internal__.game.getCoordinator().getEligibleSquares(d.call(this, a)), e = 0, f = c.length; f > e; ++e)b.push(c[e].getPosition().toAlgebraicNotation());
            return b
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.Coordinator = function() {
        function b(b, c) {
            this.__internal__ = {board: b, colorSwitcher: new a.Piece.ColorSwitcher(c), calculator: new a.Movement.DisplacementsCalculator(b), enPassantContext: new a.Movement.EnPassantContext(new a.Movement.EnPassantCoordinator(b), new a.Movement.PawnDisplacementAnalyser)}
        }

        return b.prototype.getPlayingColor = function() {
            return this.__internal__.colorSwitcher.getPlayingColor()
        }, b.prototype.moveTo = function(a, b) {
            if(!this.isEligibleMove(a, b))throw new Error("Try an invalid move");
            this.__internal__.enPassantContext.synchronizeContextBeforeDisplacement(a, b), this.__internal__.board.changePiecePosition(a, b), a.incrementDisplacementsNumber(), this.__internal__.colorSwitcher.switchColor()
        }, b.prototype.isEligibleMove = function(a, b) {
            var c = this.__internal__.board.getSquareByPosition(b);
            return this.getEligibleSquares(a).indexOf(c) >= 0
        }, b.prototype.getEligibleSquares = function(a) {
            this.__internal__.enPassantContext.setEnPassantContext(a);
            var b = this.__internal__.calculator.getEligibleSquares(a);
            return this.__internal__.enPassantContext.restoreInitialContext(), b
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.Displacement = function() {
        function a(a, b, c, d) {
            this.__internal__ = {x: a, y: b, isExtensible: c, filter: d || function() {
                return!0
            }}
        }

        return a.prototype.getX = function() {
            return this.__internal__.x
        }, a.prototype.getY = function() {
            return this.__internal__.y
        }, a.prototype.isExtensible = function(a) {
            return this.__internal__.isExtensible instanceof Function ? this.__internal__.isExtensible(a) : this.__internal__.isExtensible
        }, a.prototype.isValid = function(a) {
            return this.__internal__.filter(a)
        }, a
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.DisplacementsCalculator = function() {
        function b(a) {
            this.__internal__ = {board: a}
        }

        return b.prototype.getEligibleSquares = function(b) {
            if(!b.getSquare())throw new Error("You must add the Piece to the board before trying to move it");
            for(var c, d, e = new a.Movement.Mover(b.getSquare().getPosition(), b.getDisplacementsSuite()), f = [], g = 0; null !== (c = e.moveOnce());) {
                try {
                    d = this.__internal__.board.getSquareByPosition(c)
                } catch(h) {
                    d = null
                }
                d && d.isValidForNewPiece(b) && e.getCurrentDisplacement().isValid(d) ? (f.push(d), (!e.getCurrentDisplacement().isExtensible(++g) || d.getPiece()) && (g = 0, e.changeDirection())) : (g = 0, e.changeDirection())
            }
            return f
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.EnPassantContext = function() {
        function b(a, b) {
            this.__internal__ = {enPassantCoordinator: a, pawnDisplacementAnalyser: b}
        }

        return b.prototype.synchronizeContextBeforeDisplacement = function(a, b) {
            this.__internal__.pawnDisplacementAnalyser.isPawnCaptureDisplacement(a, b) && this.__internal__.enPassantCoordinator.setEnPassantBoard(), this.__internal__.enPassantCoordinator.resetEnPassantEligiblePawn(), this.__internal__.pawnDisplacementAnalyser.isPawnDoubleSquareDisplacement(a, b) && this.__internal__.enPassantCoordinator.setEnPassantEligiblePawn(a, b)
        }, b.prototype.setEnPassantContext = function(b) {
            b instanceof a.Piece.Type.Pawn && this.__internal__.enPassantCoordinator.setEnPassantBoard()
        }, b.prototype.restoreInitialContext = function() {
            this.__internal__.enPassantCoordinator.restoreInitialBoard()
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.EnPassantCoordinator = function() {
        function b(a) {
            this.__internal__ = {board: a, enPassantEligiblePawn: null, pawnPosition: null}
        }

        return b.prototype.resetEnPassantEligiblePawn = function() {
            this.__internal__.enPassantEligiblePawn = null, this.__internal__.pawnPosition = null
        }, b.prototype.setEnPassantEligiblePawn = function(a, b) {
            this.__internal__.enPassantEligiblePawn = a, this.__internal__.pawnPosition = b
        }, b.prototype.setEnPassantBoard = function() {
            this.__internal__.enPassantEligiblePawn && this.__internal__.pawnPosition && this.__internal__.board.changePiecePosition(this.__internal__.enPassantEligiblePawn, new a.Movement.Position(this.__internal__.pawnPosition.getX(), this.__internal__.pawnPosition.getY() - this.__internal__.enPassantEligiblePawn.getColor().getDirection()))
        }, b.prototype.restoreInitialBoard = function() {
            if(this.__internal__.enPassantEligiblePawn && this.__internal__.pawnPosition)try {
                this.__internal__.board.changePiecePosition(this.__internal__.enPassantEligiblePawn, this.__internal__.pawnPosition)
            } catch(a) {
            }
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.Mover = function() {
        function b(a, b) {
            this.__internal__ = {position: a, initialPosition: a, displacementsSuite: b, currentDirectionId: 0}
        }

        var c = function() {
            return this.__internal__.position.getX() + this.getCurrentDisplacement().getX()
        }, d = function() {
            return this.__internal__.position.getY() + this.getCurrentDisplacement().getY()
        };
        return b.prototype.moveOnce = function() {
            return this.getCurrentDisplacement() ? (this.__internal__.position = new a.Movement.Position(c.call(this), d.call(this)), this.__internal__.position) : null
        }, b.prototype.getCurrentDisplacement = function() {
            return this.__internal__.displacementsSuite[this.__internal__.currentDirectionId] ? this.__internal__.displacementsSuite[this.__internal__.currentDirectionId] : null
        }, b.prototype.changeDirection = function() {
            this.__internal__.currentDirectionId++, this.__internal__.position = this.__internal__.initialPosition
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.PawnDisplacementAnalyser = function() {
        function b() {
        }

        return b.prototype.isPawnDoubleSquareDisplacement = function(b, c) {
            if(!b.getSquare())throw new Error("Piece has currently no square");
            return b instanceof a.Piece.Type.Pawn ? 2 === Math.abs(b.getSquare().getPosition().getY() - c.getY()) : !1
        }, b.prototype.isPawnCaptureDisplacement = function(b, c) {
            if(!b.getSquare())throw new Error("Piece has currently no square");
            return b instanceof a.Piece.Type.Pawn ? 1 === Math.abs(b.getSquare().getPosition().getX() - c.getX()) : !1
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Movement = a.Movement || {}, a.Movement.Position = function() {
        function a(a, b) {
            this.__internal__ = {x: a, y: b}
        }

        var b = "abcdefgh", c = "12345678";
        return a.createByAlgebraicNotation = function(d) {
            var e = d.split("");
            return new a(b.indexOf(e[0]), c.indexOf(e[1]))
        }, a.prototype.getX = function() {
            return this.__internal__.x
        }, a.prototype.getY = function() {
            return this.__internal__.y
        }, a.prototype.toAlgebraicNotation = function() {
            return b.charAt(this.getX()) + c.charAt(this.getY())
        }, a
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Color = function() {
        function a(b) {
            if(b !== a.BLACK && b !== a.WHITE)throw new Error("Color value must be Color.BLACK or Color.WHITE");
            this.__internal__ = {value: b}
        }

        return a.BLACK = "black", a.WHITE = "white", a.prototype.getValue = function() {
            return this.__internal__.value
        }, a.prototype.isBlack = function() {
            return this.__internal__.value === a.BLACK
        }, a.prototype.isWhite = function() {
            return this.__internal__.value === a.WHITE
        }, a.prototype.getDirection = function() {
            return this.isBlack() ? -1 : 1
        }, a
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.ColorSwitcher = function() {
        function b(a) {
            this.__internal__ = {playingColor: a}
        }

        return b.prototype.getPlayingColor = function() {
            return this.__internal__.playingColor
        }, b.prototype.isPlayingColor = function(a) {
            return this.__internal__.playingColor.getValue() === a.getValue()
        }, b.prototype.switchColor = function() {
            this.__internal__.playingColor = new a.Piece.Color(this.__internal__.playingColor.isWhite() ? a.Piece.Color.BLACK : a.Piece.Color.WHITE)
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Piece = function() {
        function a(a, b) {
            this.__internal__ = {color: a, square: null, displacementsNumber: b || 0}
        }

        return a.prototype.getName = function() {
            return""
        }, a.prototype.getColor = function() {
            return this.__internal__.color
        }, a.prototype.getSquare = function() {
            return this.__internal__.square
        }, a.prototype.setSquare = function(a) {
            this.__internal__.square = a
        }, a.prototype.die = function() {
            this.__internal__.square = null
        }, a.prototype.getDisplacementsSuite = function() {
            return[]
        }, a.prototype.incrementDisplacementsNumber = function() {
            this.__internal__.displacementsNumber++
        }, a.prototype.getDisplacementsNumber = function() {
            return this.__internal__.displacementsNumber
        }, a
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.PieceFactory = function() {
        function b() {
            a.Reflection.ClassReflection.extend(a.Piece.Type.Pawn, a.Piece.Piece), a.Reflection.ClassReflection.extend(a.Piece.Type.Rook, a.Piece.Piece), a.Reflection.ClassReflection.extend(a.Piece.Type.Knight, a.Piece.Piece), a.Reflection.ClassReflection.extend(a.Piece.Type.Bishop, a.Piece.Piece), a.Reflection.ClassReflection.extend(a.Piece.Type.Queen, a.Piece.Piece), a.Reflection.ClassReflection.extend(a.Piece.Type.King, a.Piece.Piece)
        }

        var c = function(a) {
            return a.charAt(0).toUpperCase() + a.slice(1).toLowerCase()
        };
        return b.prototype.create = function(b, d, e) {
            return new (a.Piece.Type[c(b)])(new a.Piece.Color(d), e)
        }, b.prototype.createByData = function(a) {
            return this.create(a.type, a.color, a.displacementsNumber)
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Type = a.Piece.Type || {}, a.Piece.Type.Bishop = function() {
        function b(a, b) {
            this.__super__.constructor.call(this, a, b)
        }

        return b.prototype.getName = function() {
            return"B"
        }, b.prototype.getDisplacementsSuite = function() {
            return[new a.Movement.Displacement(1, 1, !0), new a.Movement.Displacement(1, -1, !0), new a.Movement.Displacement(-1, -1, !0), new a.Movement.Displacement(-1, 1, !0)]
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Type = a.Piece.Type || {}, a.Piece.Type.King = function() {
        function b(a, b) {
            this.__super__.constructor.call(this, a, b)
        }

        return b.prototype.getName = function() {
            return"K"
        }, b.prototype.getDisplacementsSuite = function() {
            return[new a.Movement.Displacement(0, 1, !1), new a.Movement.Displacement(1, 1, !1), new a.Movement.Displacement(1, 0, !1), new a.Movement.Displacement(1, -1, !1), new a.Movement.Displacement(0, -1, !1), new a.Movement.Displacement(-1, -1, !1), new a.Movement.Displacement(-1, 0, !1), new a.Movement.Displacement(-1, 1, !1)]
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Type = a.Piece.Type || {}, a.Piece.Type.Knight = function() {
        function b(a, b) {
            this.__super__.constructor.call(this, a, b)
        }

        return b.prototype.getName = function() {
            return"N"
        }, b.prototype.getDisplacementsSuite = function() {
            return[new a.Movement.Displacement(1, 2, !1), new a.Movement.Displacement(2, 1, !1), new a.Movement.Displacement(2, -1, !1), new a.Movement.Displacement(1, -2, !1), new a.Movement.Displacement(-1, -2, !1), new a.Movement.Displacement(-2, -1, !1), new a.Movement.Displacement(-2, 1, !1), new a.Movement.Displacement(-1, 2, !1)]
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Type = a.Piece.Type || {}, a.Piece.Type.Pawn = function() {
        function b(a, b) {
            this.__super__.constructor.call(this, a, b)
        }

        return b.prototype.getName = function() {
            return"P"
        }, b.prototype.getDisplacementsSuite = function() {
            var b = this;
            return[new a.Movement.Displacement(0, this.getColor().getDirection(), function(a) {
                return!b.__internal__.displacementsNumber && 2 > a
            }, function(a) {
                return!a.getPiece()
            }), new a.Movement.Displacement(-1, this.getColor().getDirection(), !1, function(a) {
                return Boolean(a.getPiece())
            }), new a.Movement.Displacement(1, this.getColor().getDirection(), !1, function(a) {
                return Boolean(a.getPiece())
            })]
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Type = a.Piece.Type || {}, a.Piece.Type.Queen = function() {
        function b(a, b) {
            this.__super__.constructor.call(this, a, b)
        }

        return b.prototype.getName = function() {
            return"Q"
        }, b.prototype.getDisplacementsSuite = function() {
            return[new a.Movement.Displacement(0, 1, !0), new a.Movement.Displacement(1, 1, !0), new a.Movement.Displacement(1, 0, !0), new a.Movement.Displacement(1, -1, !0), new a.Movement.Displacement(0, -1, !0), new a.Movement.Displacement(-1, -1, !0), new a.Movement.Displacement(-1, 0, !0), new a.Movement.Displacement(-1, 1, !0)]
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Piece = a.Piece || {}, a.Piece.Type = a.Piece.Type || {}, a.Piece.Type.Rook = function() {
        function b(a, b) {
            this.__super__.constructor.call(this, a, b)
        }

        return b.prototype.getName = function() {
            return"R"
        }, b.prototype.getDisplacementsSuite = function() {
            return[new a.Movement.Displacement(0, 1, !0), new a.Movement.Displacement(1, 0, !0), new a.Movement.Displacement(0, -1, !0), new a.Movement.Displacement(-1, 0, !0)]
        }, b
    }(), a
}(Chess || {}), Chess = function(a) {
    "use strict";
    return a.Reflection = a.Reflection || {}, a.Reflection.ClassReflection = {extend: function(a, b) {
        if(!(a instanceof b)) {
            var c = a.prototype;
            a.prototype = this.clone(b.prototype);
            for(var d in c)a.prototype[d] = c[d];
            a.prototype.constructor = a, a.prototype.__super__ = b.prototype
        }
    }, clone: function(a) {
        var b = function() {
        };
        return b.prototype = a, new b
    }}, a
}(Chess || {});